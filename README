üìÑ Informe T√©cnico: Aplicaci√≥n Web con Renderizado en Servidor y Base de Datos MongoDB
1. Introducci√≥n
Como parte del desarrollo de competencias en bases de datos no relacionales dentro del marco de formaci√≥n acad√©mica, se dise√±√≥ y construy√≥ una aplicaci√≥n web con renderizado del lado del servidor utilizando Python (FastAPI) y una base de datos MongoDB, desplegada mediante el servicio MongoDB Atlas Free Tier.

El objetivo principal del proyecto es afianzar conocimientos sobre modelado, inserci√≥n, consulta y actualizaci√≥n de datos en MongoDB, utilizando una estructura de documentos con diferentes tipos de campos, sin depender de esquemas relacionales r√≠gidos. La elecci√≥n de una aplicaci√≥n web responde al enfoque del programa acad√©mico, que propone este medio como uno de los m√∫ltiples casos de uso que permiten aplicar los conceptos aprendidos.

2. Descripci√≥n General del Proyecto
La aplicaci√≥n consiste en un men√∫ de restaurante digital, accesible desde una interfaz web simple, con p√°ginas generadas din√°micamente desde el servidor utilizando plantillas HTML y CSS. Los datos de los platos, sus reacciones (me gusta, no me gusta) y comentarios de los usuarios son persistidos en MongoDB.

Cada plato cuenta con:

Un identificador (slug)

Categor√≠a

Nombre

Descripci√≥n corta y extendida

Precio

Ruta de imagen asociada

Listado de correos electr√≥nicos que marcaron "me gusta"

Listado de correos electr√≥nicos que marcaron "no me gusta"

Lista de comentarios (nombre + texto)

El sistema permite que los usuarios:

Naveguen por categor√≠as de platos.

Accedan a una p√°gina de detalle para cada plato.

Registren reacciones y comentarios, los cuales se almacenan directamente en la base de datos.

3. Tecnolog√≠a Utilizada
FastAPI: Framework moderno para aplicaciones web en Python, utilizado para definir rutas, manejar formularios y renderizar HTML mediante Jinja2.

MongoDB Atlas (Free Tier): Base de datos NoSQL basada en documentos, utilizada como repositorio principal de la informaci√≥n.

Jinja2: Sistema de plantillas para generar HTML desde el backend.

HTML5 & CSS3: Para el dise√±o de la interfaz de usuario, estructuraci√≥n de los datos y experiencia visual.

4. Dise√±o de la Base de Datos
Se opt√≥ por una estructura flexible en MongoDB donde cada documento de tipo ‚Äúplato‚Äù incluye campos embebidos para comentarios y reacciones. Esta decisi√≥n permite representar relaciones uno-a-muchos de forma natural, sin necesidad de normalizaci√≥n compleja, aprovechando la estructura de documentos anidados propia de MongoDB.

Esto tambi√©n facilita la consulta de toda la informaci√≥n de un plato desde una sola operaci√≥n (find), mejorando la eficiencia al no requerir m√∫ltiples colecciones.

Ejemplo de documento:

json
Copy
Edit
{
  "slug": "costillas-bbq",
  "category": "Asados",
  "name": "Costillas BBQ",
  "description": "...",
  "price": 28000,
  "likes": ["correo@ejemplo.com"],
  "dislikes": [],
  "comments": [{ "name": "Juan", "text": "Muy bueno" }]
}
5. Caracter√≠sticas Relevantes del Desarrollo
Interactividad desde el cliente sin frontend complejo: El uso de JavaScript permite registrar likes/dislikes y enviar comentarios sin necesidad de recargar completamente la p√°gina, aunque la estructura general sigue siendo una aplicaci√≥n renderizada desde el servidor.

Persistencia local de usuario: Se utiliza localStorage para guardar el nombre y correo del usuario al comentar, lo cual permite una experiencia continua y personalizada sin necesidad de autenticaci√≥n.

Modularidad del backend: La l√≥gica de acceso a datos fue abstra√≠da mediante una clase cliente (PlateDataClient), permitiendo intercambiar f√°cilmente entre una implementaci√≥n en memoria y una implementaci√≥n conectada a MongoDB, sin modificar la l√≥gica del servidor.

Separaci√≥n de responsabilidades: La l√≥gica de presentaci√≥n (plantillas HTML), estilo (CSS), l√≥gica del servidor (FastAPI) y acceso a datos (cliente Mongo) est√°n desacopladas, permitiendo mantenibilidad y escalabilidad.

Validez como pr√°ctica profesional: A pesar de su simplicidad, el proyecto emula pr√°cticas de desarrollo profesional: control de errores, validaci√≥n de datos, reutilizaci√≥n de componentes, separaci√≥n de l√≥gica y responsabilidad √∫nica.

6. Conclusi√≥n
Este desarrollo ha permitido aplicar de manera pr√°ctica los conceptos clave de bases de datos NoSQL utilizando MongoDB, en un contexto web realista. La experiencia incluye no solo el dise√±o del modelo de datos, sino tambi√©n su integraci√≥n, consulta y actualizaci√≥n desde una aplicaci√≥n interactiva que responde a acciones del usuario.

El uso de MongoDB Atlas demostr√≥ ser adecuado para este tipo de escenarios, permitiendo un despliegue r√°pido y escalable, sin comprometer la flexibilidad que caracteriza a las bases de datos orientadas a documentos.

Este tipo de proyectos integradores no solo consolidan el conocimiento t√©cnico, sino que tambi√©n preparan para contextos reales donde la estructura relacional no siempre es la opci√≥n m√°s eficiente o pr√°ctica.